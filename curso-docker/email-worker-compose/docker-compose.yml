version: '3' ## Última versão do docker-compose, indicando o conjunto de funcionalidades que será possível de trabalhar dentro do compose.
volumes:
    dados: ## Nome de um dos volumes, que está mapeado dentro do serviço db
networks: ## Cria-se três redes que comportarão os containers da aplicação, a rede banco, web e fila.
    banco:
    web:
    fila:
services:
    db:
        image: postgres:9.6
        environment: 
            - POSTGRES_PASSWORD=postgres # Configura uma senha padrão para acesso aos serviços do postgres. Caso não adicione essa linha e execute o docker-compose up sem o comando POSTGRES_VERSION=9.6 antes do docker-compose up, dará um erro e não subirá os serviços do docker-compose.
        volumes: 
            # Volume dos dados
            - dados:/var/lib/postgresql/data
            # Scripts
            - ./scripts:/scripts ## Pega o caminho relativo a partir do docker-compose e mapeia na máquina host a pasta /script para ter acesso aos Scripts:mapeia para dentro do container a pasta /scripts
            - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql ## Mapeia o init.sql criado na pasta /scrips na máquina host para uma pasta default inicializada no docker para os scripts postgres
        networks: 
            - banco ## O service de DB estará apenas dentro da rede denominada banco.
    frontend:
        image: nginx:1.13
        volumes:
            # Site
            - ./web:/usr/share/nginx/html/ ## Caminho relativo que está na máquina host : caminho em que deve ser mapeado/copiado o arquivo da máquina host para o nginx
            # Configuração do proxy reverso
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        ports:
            - 80:80 ## Porta em que roda por padrão : Porta exposta
        networks:
           - web ## O service de front-end estará apenas dentro da rede denominada web.
        depends_on: ## Indica as dependências do serviço, com isso ao executar o comando docker-compose up o primeiro serviço executado será aquele que não possui dependencias. Além disso, caso seja inicializado um serviço de forma isolada, o depends on indicará os demais serviços que deverão ser inicializados também para a correta execução do serviço requerido.
           - app
    app:
        image: python:3.6
        volumes:
            # Aplicação
            - ./app:/app ## Mapeia o host : mapeia o container
        working_dir: /app ## Diretório corrente de execução no container
        command: bash ./app.sh ## Comando de execução. Se não colocar o bash antes dá um erro na hora de subir o container do app/back-end.
        networks: ## O service de aplicação estará inserida na rede banco, web e fila. Isso porque a aplicação interagirá com os serviços que estarão nessas redes.
            - banco
            - web
            - fila
        depends_on:
            - db
            - queue
        environment:
            - DB_NAME=abc_sender ## Definição de variável de ambiente para poder personalizar as configurações realizadas em código. Por exemplo, essa variável DB_NAME está em sender.py, mas está sendo definida aqui. 
                                 ## Esse valor na verdade está sendo sobrescrito no arquivo docker-compose.override.yml
    queue:
        image: redis:3.2
        networks:
            - fila ## Estará/Pertence na rede fila.
    worker:
        build: worker ## Vai procurar dentro da pasta /worker o Dockerfile e vai buildar ele, assim será possível gerar vários containers utilizando o descritor como imagem
        volumes:
            # Worker
            - ./worker:/worker ## ./pasta mapeada na máquina host : /pasta que receberá os volumes no container
        working_dir: /worker ## Diretório corrente a ser executado
        command: worker.py
        networks:
            - fila ## Estará na rede fila.
        depends_on:
            - queue